{
  "address": "0xe09d66ab872Da89b2d875E7c86cBe7cC5e3667EA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "AddressWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "KYCCheckEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "kycContract",
          "type": "address"
        }
      ],
      "name": "KYCContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SanctionsCheckEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TokenMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "WhitelistEnabled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "linkedToken",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "linkedTokenInterfaces",
          "type": "string[]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "linkedToken",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "linkedTokenInterfaces",
          "type": "string[]"
        },
        {
          "internalType": "bool",
          "name": "kycCheckEnabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "whitelistEnabled",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "kycContract",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "whitelistAddresses",
          "type": "address[]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftData",
      "outputs": [
        {
          "internalType": "string",
          "name": "status",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "linkedToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftKycData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "kycCheckEnabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "whitelistEnabled",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "kycContract",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onlyOwnerCanMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "pauseToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_onlyOwnerCanMint",
          "type": "bool"
        }
      ],
      "name": "setOnlyOwnerCanMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokensByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "unpauseToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "status",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "kycCheckEnabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "whitelistEnabled",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "kycContract",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "whitelistAddresses",
          "type": "address[]"
        }
      ],
      "name": "updateNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "status",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "updateNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x24c4d9c79a0198930cef5e7facc004ac9b6bf17743a8dc9bc6c19117af25620c",
  "receipt": {
    "to": null,
    "from": "0xD719085662A26971c43881C008639bb8AC1Babba",
    "contractAddress": "0xe09d66ab872Da89b2d875E7c86cBe7cC5e3667EA",
    "transactionIndex": 1,
    "gasUsed": "4896433",
    "logsBloom": "0x
    "blockHash": "0x25f5ffd82a4225be0708b32c8b910994f342ddb14648d1330ed87bacf21700fe",
    "transactionHash": "0x24c4d9c79a0198930cef5e7facc004ac9b6bf17743a8dc9bc6c19117af25620c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 221303,
        "transactionHash": "0x24c4d9c79a0198930cef5e7facc004ac9b6bf17743a8dc9bc6c19117af25620c",
        "address": "0xe09d66ab872Da89b2d875E7c86cBe7cC5e3667EA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d719085662a26971c43881c008639bb8ac1babba"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x25f5ffd82a4225be0708b32c8b910994f342ddb14648d1330ed87bacf21700fe"
      }
    ],
    "blockNumber": 221303,
    "cumulativeGasUsed": "4896433",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "NFT KYC Factory",
    "NFTKYC"
  ],
  "numDeployments": 1,
  "solcInputHash": "1fed855af4554d94fc0cc2bc9131daeb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AddressWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"KYCCheckEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"kycContract\",\"type\":\"address\"}],\"name\":\"KYCContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SanctionsCheckEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"WhitelistEnabled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"linkedToken\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"linkedTokenInterfaces\",\"type\":\"string[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"linkedToken\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"linkedTokenInterfaces\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"kycCheckEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"whitelistEnabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"kycContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"whitelistAddresses\",\"type\":\"address[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"linkedToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftKycData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"kycCheckEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"whitelistEnabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"kycContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyOwnerCanMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"pauseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyOwnerCanMint\",\"type\":\"bool\"}],\"name\":\"setOnlyOwnerCanMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unpauseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"kycCheckEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"whitelistEnabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"kycContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"whitelistAddresses\",\"type\":\"address[]\"}],\"name\":\"updateNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"updateNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTFactoryKyc.sol\":\"NFTFactoryKyc\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/NFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract NFTFactory is ERC721URIStorage, Ownable, Pausable {\\n\\tusing Counters for Counters.Counter;\\n\\tCounters.Counter private _tokenIdCounter;\\n\\n\\tstruct NFTData {\\n\\t\\tstring status;\\n\\t\\taddress linkedToken;\\n\\t\\tstring[] linkedTokenInterfaces;\\n\\t\\tbool locked;\\n\\t\\tbool paused;\\n\\t}\\n\\n\\tmapping(uint256 => NFTData) public nftData;\\n\\tmapping(address => uint256[]) public tokensByAddress;\\n\\n\\tbool public onlyOwnerCanMint = false;\\n\\n\\tevent TokenMinted(uint256 tokenId, address to);\\n\\tevent MetadataLocked(uint256 tokenId);\\n\\tevent MetadataUnlocked(uint256 tokenId);\\n\\tevent TokenPaused(uint256 tokenId);\\n\\tevent TokenUnpaused(uint256 tokenId);\\n\\n\\tconstructor(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol\\n\\t) ERC721(_name, _symbol) {}\\n\\n\\tfunction setOnlyOwnerCanMint(bool _onlyOwnerCanMint) external onlyOwner {\\n\\t\\tonlyOwnerCanMint = _onlyOwnerCanMint;\\n\\t}\\n\\n\\tfunction mint(\\n\\t\\taddress to,\\n\\t\\tstring memory tokenURI,\\n\\t\\taddress linkedToken,\\n\\t\\tstring[] memory linkedTokenInterfaces\\n\\t) public whenNotPaused {\\n\\t\\trequire(\\n\\t\\t\\t!onlyOwnerCanMint || msg.sender == owner(),\\n\\t\\t\\t\\\"Minting is restricted to the owner\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 tokenId = _tokenIdCounter.current();\\n\\t\\t_tokenIdCounter.increment();\\n\\t\\t_safeMint(to, tokenId);\\n\\t\\t_setTokenURI(tokenId, tokenURI);\\n\\n\\t\\ttokensByAddress[to].push(tokenId); // Add token to the new owner's list\\n\\n\\t\\tnftData[tokenId] = NFTData({\\n\\t\\t\\tstatus: \\\"active\\\",\\n\\t\\t\\tlinkedToken: linkedToken,\\n\\t\\t\\tlinkedTokenInterfaces: linkedTokenInterfaces,\\n\\t\\t\\tlocked: false,\\n\\t\\t\\tpaused: false\\n\\t\\t});\\n\\n\\t\\temit TokenMinted(tokenId, to);\\n\\t}\\n\\n\\t// Callable by both owner and individual NFT holder\\n\\tfunction updateNFT(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory status,\\n\\t\\tstring memory tokenURI\\n\\t) public {\\n\\t\\trequire(_exists(tokenId), \\\"NFT does not exist\\\");\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == owner() || msg.sender == ownerOf(tokenId),\\n\\t\\t\\t\\\"Caller is not the owner or NFT owner\\\"\\n\\t\\t);\\n\\t\\trequire(!nftData[tokenId].locked, \\\"Metadata is locked\\\");\\n\\n\\t\\tif (bytes(status).length > 0) nftData[tokenId].status = status;\\n\\t\\tif (bytes(tokenURI).length > 0) _setTokenURI(tokenId, tokenURI);\\n\\t}\\n\\n\\t// Callable by both owner and individual NFT holder\\n\\t// If called by NFT holder, then it is one-way and needs admin to unlock\\n\\tfunction lock(uint256 tokenId) public {\\n\\t\\trequire(_exists(tokenId), \\\"NFT does not exist\\\");\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == owner() || msg.sender == ownerOf(tokenId),\\n\\t\\t\\t\\\"Caller is not the owner or NFT owner\\\"\\n\\t\\t);\\n\\n\\t\\tnftData[tokenId].locked = true;\\n\\t\\temit MetadataLocked(tokenId);\\n\\t}\\n\\n\\tfunction unlock(uint256 tokenId) public onlyOwner {\\n\\t\\trequire(_exists(tokenId), \\\"NFT does not exist\\\");\\n\\t\\tnftData[tokenId].locked = false;\\n\\t\\temit MetadataUnlocked(tokenId);\\n\\t}\\n\\n\\tfunction pauseAll() public onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n\\tfunction unpauseAll() public onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\tfunction pauseToken(uint256 tokenId) public {\\n\\t\\trequire(_exists(tokenId), \\\"NFT does not exist\\\");\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == owner() || msg.sender == ownerOf(tokenId),\\n\\t\\t\\t\\\"Caller is not the owner or NFT owner\\\"\\n\\t\\t);\\n\\t\\tnftData[tokenId].paused = true;\\n\\t\\temit TokenPaused(tokenId);\\n\\t}\\n\\n\\tfunction unpauseToken(uint256 tokenId) public onlyOwner {\\n\\t\\trequire(_exists(tokenId), \\\"NFT does not exist\\\");\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == owner() || msg.sender == ownerOf(tokenId),\\n\\t\\t\\t\\\"Caller is not the owner or NFT owner\\\"\\n\\t\\t);\\n\\t\\tnftData[tokenId].paused = false;\\n\\t\\temit TokenUnpaused(tokenId);\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 batchSize\\n\\t) internal virtual override whenNotPaused {\\n\\t\\trequire(!nftData[tokenId].paused, \\\"Token is paused\\\");\\n\\n\\t\\tif (from != address(0)) {\\n\\t\\t\\t// Remove token from the previous owner's list\\n\\t\\t\\tuint256 index;\\n\\t\\t\\tuint256[] storage tokens = tokensByAddress[from];\\n\\t\\t\\tfor (uint256 i = 0; i < tokens.length; i++) {\\n\\t\\t\\t\\tif (tokens[i] == tokenId) {\\n\\t\\t\\t\\t\\tindex = i;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\ttokens[index] = tokens[tokens.length - 1];\\n\\t\\t\\ttokens.pop();\\n\\t\\t}\\n\\n\\t\\tif (to != address(0)) {\\n\\t\\t\\t// Add token to the new owner's list\\n\\t\\t\\ttokensByAddress[to].push(tokenId);\\n\\t\\t}\\n\\n\\t\\tsuper._beforeTokenTransfer(from, to, tokenId, batchSize);\\n\\t}\\n}\\n\",\"keccak256\":\"0x1d272302576270f075a7f993365b766c23786e8b66745777f8ca5e8fe6db8ae1\",\"license\":\"MIT\"},\"contracts/NFTFactoryKyc.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./NFTFactory.sol\\\";\\n\\ninterface IKintoKYC {\\n\\tfunction isKYC(address user) external view returns (bool);\\n\\tfunction isSanctionsSafe(address user) external view returns (bool);\\n}\\n\\ncontract NFTFactoryKyc is NFTFactory {\\n\\tusing Counters for Counters.Counter;\\n\\tCounters.Counter private _tokenIdCounter;\\n\\n\\tstruct NFTKYCData {\\n\\t\\tbool kycCheckEnabled;\\n\\t\\tbool whitelistEnabled;\\n\\t\\taddress kycContract;\\n\\t\\tmapping(address => bool) whitelist;\\n\\t}\\n\\n\\tmapping(uint256 => NFTKYCData) public nftKycData;\\n\\n\\tevent KYCCheckEnabled(uint256 tokenId, bool enabled);\\n\\tevent SanctionsCheckEnabled(uint256 tokenId, bool enabled);\\n\\tevent WhitelistEnabled(uint256 tokenId, bool enabled);\\n\\tevent KYCContractUpdated(uint256 tokenId, address kycContract);\\n\\tevent AddressWhitelisted(uint256 tokenId, address user, bool status);\\n\\n\\tconstructor(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol\\n\\t) NFTFactory(_name, _symbol) {}\\n\\n\\t// Overriding the mint function to handle additional parameters and whitelist initialization\\n\\tfunction mint(\\n\\t\\taddress to,\\n\\t\\tstring memory tokenURI,\\n\\t\\taddress linkedToken,\\n\\t\\tstring[] memory linkedTokenInterfaces,\\n\\t\\tbool kycCheckEnabled,\\n\\t\\tbool whitelistEnabled,\\n\\t\\taddress kycContract,\\n\\t\\taddress[] memory whitelistAddresses // New parameter for whitelist addresses\\n\\t) public {\\n\\t\\trequire(\\n\\t\\t\\t!onlyOwnerCanMint || msg.sender == owner(),\\n\\t\\t\\t\\\"Minting is restricted to the owner\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 tokenId = _tokenIdCounter.current();\\n\\t\\t_tokenIdCounter.increment();\\n\\t\\t_safeMint(to, tokenId);\\n\\t\\t_setTokenURI(tokenId, tokenURI);\\n\\n\\t\\t// Initialize the struct without the mapping because of nested mapping error\\n\\t\\tnftData[tokenId].status = \\\"active\\\";\\n\\t\\tnftData[tokenId].linkedToken = linkedToken;\\n\\t\\tnftData[tokenId].linkedTokenInterfaces = linkedTokenInterfaces;\\n\\t\\tnftData[tokenId].locked = false;\\n\\t\\tnftData[tokenId].paused = false;\\n\\t\\tnftKycData[tokenId].kycCheckEnabled = kycCheckEnabled;\\n\\t\\tnftKycData[tokenId].whitelistEnabled = whitelistEnabled;\\n\\t\\tnftKycData[tokenId].kycContract = kycContract;\\n\\n\\t\\t// Update the whitelist mapping separately\\n\\t\\tfor (uint256 i = 0; i < whitelistAddresses.length; i++) {\\n\\t\\t\\tnftKycData[tokenId].whitelist[whitelistAddresses[i]] = true;\\n\\t\\t}\\n\\n\\t\\ttokensByAddress[to].push(tokenId); // Add token to the new owner's list\\n\\n\\t\\temit TokenMinted(tokenId, to);\\n\\t}\\n\\n\\t// Callable by both owner and individual NFT holder\\n\\tfunction updateNFT(\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory status,\\n\\t\\tstring memory tokenURI,\\n\\t\\tbool kycCheckEnabled,\\n\\t\\tbool whitelistEnabled,\\n\\t\\taddress kycContract,\\n\\t\\taddress[] memory whitelistAddresses\\n\\t) public {\\n\\t\\trequire(_exists(tokenId), \\\"NFT does not exist\\\");\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == owner() || msg.sender == ownerOf(tokenId),\\n\\t\\t\\t\\\"Caller is not the owner or NFT owner\\\"\\n\\t\\t);\\n\\t\\trequire(!nftData[tokenId].locked, \\\"Metadata is locked\\\");\\n\\n\\t\\tif (bytes(status).length > 0) nftData[tokenId].status = status;\\n\\t\\tif (bytes(tokenURI).length > 0) _setTokenURI(tokenId, tokenURI);\\n\\n\\t\\t// Set kycCheckEnabled if provided\\n\\t\\tif (kycCheckEnabled) {\\n\\t\\t\\tnftKycData[tokenId].kycCheckEnabled = kycCheckEnabled;\\n\\t\\t}\\n\\n\\t\\t// Set whitelistEnabled if provided\\n\\t\\tif (whitelistEnabled) {\\n\\t\\t\\tnftKycData[tokenId].whitelistEnabled = whitelistEnabled;\\n\\t\\t}\\n\\n\\t\\t// Set kycContract if a valid address is provided\\n\\t\\tif (kycContract != address(0)) {\\n\\t\\t\\tnftKycData[tokenId].kycContract = kycContract;\\n\\t\\t}\\n\\n\\t\\t// Set whitelist addresses if provided\\n\\t\\tif (whitelistAddresses.length > 0) {\\n\\t\\t\\tfor (uint256 i = 0; i < whitelistAddresses.length; i++) {\\n\\t\\t\\t\\tnftKycData[tokenId].whitelist[whitelistAddresses[i]] = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 batchSize\\n\\t) internal virtual override whenNotPaused {\\n\\t\\trequire(!nftData[tokenId].paused, \\\"Token is paused\\\");\\n\\n\\t\\t// Check if KYC is enabled and validate with KYC contract\\n\\t\\tif (nftKycData[tokenId].kycCheckEnabled) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tIKintoKYC(nftKycData[tokenId].kycContract).isKYC(to) &&\\n\\t\\t\\t\\t\\tIKintoKYC(nftKycData[tokenId].kycContract).isSanctionsSafe(\\n\\t\\t\\t\\t\\t\\tto\\n\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\\"Recipient has not passed KYC or is not SanctionsSafe\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// Check if whitelist is enabled and the recipient is in the whitelist\\n\\t\\tif (nftKycData[tokenId].whitelistEnabled) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tnftKycData[tokenId].whitelist[to],\\n\\t\\t\\t\\t\\\"Recipient is not in the whitelist\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tif (from != address(0)) {\\n\\t\\t\\t// Remove token from the previous owner's list\\n\\t\\t\\tuint256 index;\\n\\t\\t\\tuint256[] storage tokens = tokensByAddress[from];\\n\\t\\t\\tfor (uint256 i = 0; i < tokens.length; i++) {\\n\\t\\t\\t\\tif (tokens[i] == tokenId) {\\n\\t\\t\\t\\t\\tindex = i;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\ttokens[index] = tokens[tokens.length - 1];\\n\\t\\t\\ttokens.pop();\\n\\t\\t}\\n\\n\\t\\tif (to != address(0)) {\\n\\t\\t\\t// Add token to the new owner's list\\n\\t\\t\\ttokensByAddress[to].push(tokenId);\\n\\t\\t}\\n\\n\\t\\tsuper._beforeTokenTransfer(from, to, tokenId, batchSize);\\n\\t}\\n}\\n\",\"keccak256\":\"0xd00de9194bdca770725687a3c1273e558e8663fb32620211064c0a9ccd215301\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600b805460ff191690553480156200001b57600080fd5b5060405162003497380380620034978339810160408190526200003e91620001af565b818181816000620000508382620002a8565b5060016200005f8282620002a8565b5050506200007c620000766200009460201b60201c565b62000098565b50506007805460ff60a01b1916905550620003749050565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200011257600080fd5b81516001600160401b03808211156200012f576200012f620000ea565b604051601f8301601f19908116603f011681019082821181831017156200015a576200015a620000ea565b816040528381526020925086838588010111156200017757600080fd5b600091505b838210156200019b57858201830151818301840152908201906200017c565b600093810190920192909252949350505050565b60008060408385031215620001c357600080fd5b82516001600160401b0380821115620001db57600080fd5b620001e98683870162000100565b935060208501519150808211156200020057600080fd5b506200020f8582860162000100565b9150509250929050565b600181811c908216806200022e57607f821691505b6020821081036200024f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002a357600081815260208120601f850160051c810160208610156200027e5750805b601f850160051c820191505b818110156200029f578281556001016200028a565b5050505b505050565b81516001600160401b03811115620002c457620002c4620000ea565b620002dc81620002d5845462000219565b8462000255565b602080601f831160018114620003145760008415620002fb5750858301515b600019600386901b1c1916600185901b1785556200029f565b600085815260208120601f198616915b82811015620003455788860151825594840194600190910190840162000324565b5085821015620003645787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61311380620003846000396000f3fe608060405234801561001057600080fd5b50600436106101b05760003560e01c80638a2ddd03116100ef578063bafd02fb11610092578063bafd02fb146103ca578063c87b56dd146103dd578063dd467064146103f0578063e985e9c514610403578063ef96652314610416578063f2fde38b14610429578063fbd395f81461043c578063fda361641461044f57600080fd5b80638a2ddd03146102f25780638c210975146102fa5780638da5cb5b1461031d57806395d89b41146103255780639802f6e91461032d578063a22cb46514610391578063b88d4fde146103a4578063ba27d56f146103b757600080fd5b80635c975abb116101575780635c975abb146102685780636198e339146102705780636352211e1461028357806370a0823114610296578063715018a6146102b757806374546e25146102bf578063776ab634146102d257806385d098dc146102e557600080fd5b806301ffc9a7146101b557806306fdde03146101dd578063081812fc146101f2578063095ea7b31461021257806323b872dd1461022757806342842e0e1461023a578063595c6a671461024d5780635bb9458914610255575b600080fd5b6101c86101c336600461251c565b610462565b60405190151581526020015b60405180910390f35b6101e561048d565b6040516101d49190612589565b61020561020036600461259c565b61051f565b6040516101d491906125b5565b6102256102203660046125e5565b610546565b005b61022561023536600461260f565b610660565b61022561024836600461260f565b610691565b6102256106ac565b610225610263366004612664565b6106be565b6101c86106d9565b61022561027e36600461259c565b6106e9565b61020561029136600461259c565b61076c565b6102a96102a4366004612681565b6107a0565b6040519081526020016101d4565b610225610826565b6102256102cd36600461280b565b610838565b6102256102e036600461259c565b6109ea565b600b546101c89060ff1681565b610225610abf565b61030d61030836600461259c565b610acf565b6040516101d4949392919061288f565b610205610b8f565b6101e5610b9e565b61036b61033b36600461259c565b600d6020526000908152604090205460ff808216916101008104909116906201000090046001600160a01b031683565b60408051931515845291151560208401526001600160a01b0316908201526060016101d4565b61022561039f3660046128c9565b610bad565b6102256103b2366004612900565b610bbc565b6102a96103c53660046125e5565b610bf4565b6102256103d83660046129d1565b610c25565b6101e56103eb36600461259c565b610e1d565b6102256103fe36600461259c565b610f2d565b6101c8610411366004612a9d565b610ffc565b610225610424366004612ad0565b61102a565b610225610437366004612681565b611263565b61022561044a36600461259c565b6112dc565b61022561045d366004612bab565b6113ad565b60006001600160e01b03198216632483248360e11b1480610487575061048782611492565b92915050565b60606000805461049c90612c17565b80601f01602080910402602001604051908101604052809291908181526020018280546104c890612c17565b80156105155780601f106104ea57610100808354040283529160200191610515565b820191906000526020600020905b8154815290600101906020018083116104f857829003601f168201915b5050505050905090565b600061052a826114e2565b506000908152600460205260409020546001600160a01b031690565b60006105518261076c565b9050806001600160a01b0316836001600160a01b0316036105c35760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105df57506105df8133610ffc565b6106515760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016105ba565b61065b8383611507565b505050565b61066a3382611575565b6106865760405162461bcd60e51b81526004016105ba90612c51565b61065b8383836115d3565b61065b83838360405180602001604052806000815250610bbc565b6106b4611744565b6106bc6117a3565b565b6106c6611744565b600b805460ff1916911515919091179055565b600754600160a01b900460ff1690565b6106f1611744565b6106fa816117fd565b6107165760405162461bcd60e51b81526004016105ba90612c9e565b60008181526009602052604090819020600301805460ff19169055517f15231ceabda9f4f9436b8f17a28b36c21c8e434c821082aa1cfb3fcc994fe6c0906107619083815260200190565b60405180910390a150565b6000806107788361181a565b90506001600160a01b0381166104875760405162461bcd60e51b81526004016105ba90612cca565b60006001600160a01b03821661080a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105ba565b506001600160a01b031660009081526003602052604090205490565b61082e611744565b6106bc6000611835565b610840611887565b600b5460ff16158061086a5750610855610b8f565b6001600160a01b0316336001600160a01b0316145b6108865760405162461bcd60e51b81526004016105ba90612cfc565b600061089160085490565b90506108a1600880546001019055565b6108ab85826118cf565b6108b581856118e9565b6001600160a01b038086166000908152600a60209081526040808320805460018101825590845282842001859055805160e081018252600660a082019081526561637469766560d01b60c0830152815293871684830152838101869052606084018390526080840183905284835260099091529020815181906109389082612d8c565b506020828101516001830180546001600160a01b0319166001600160a01b03909216919091179055604083015180516109779260028501920190612449565b5060608201516003909101805460809093015115156101000261ff00199215159290921661ffff19909316929092171790556040517f3a5398bda6f1f57d6c96834fa9bf02b5517bdc847d14312015a917ba421c31c9906109db9083908890612e4b565b60405180910390a15050505050565b6109f2611744565b6109fb816117fd565b610a175760405162461bcd60e51b81526004016105ba90612c9e565b610a1f610b8f565b6001600160a01b0316336001600160a01b03161480610a575750610a428161076c565b6001600160a01b0316336001600160a01b0316145b610a735760405162461bcd60e51b81526004016105ba90612e62565b60008181526009602052604090819020600301805461ff0019169055517f0cfa9cc56bacd896c88effb6a4051b954fcaaf2de7ae98882e39f294ea651843906107619083815260200190565b610ac7611744565b6106bc6119a5565b600960205260009081526040902080548190610aea90612c17565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1690612c17565b8015610b635780601f10610b3857610100808354040283529160200191610b63565b820191906000526020600020905b815481529060010190602001808311610b4657829003601f168201915b50505050600183015460039093015491926001600160a01b03169160ff80821692506101009091041684565b6007546001600160a01b031690565b60606001805461049c90612c17565b610bb83383836119e1565b5050565b610bc63383611575565b610be25760405162461bcd60e51b81526004016105ba90612c51565b610bee84848484611aab565b50505050565b600a6020528160005260406000208181548110610c1057600080fd5b90600052602060002001600091509150505481565b610c2e876117fd565b610c4a5760405162461bcd60e51b81526004016105ba90612c9e565b610c52610b8f565b6001600160a01b0316336001600160a01b03161480610c8a5750610c758761076c565b6001600160a01b0316336001600160a01b0316145b610ca65760405162461bcd60e51b81526004016105ba90612e62565b60008781526009602052604090206003015460ff1615610cd85760405162461bcd60e51b81526004016105ba90612ea6565b855115610cf9576000878152600960205260409020610cf78782612d8c565b505b845115610d0a57610d0a87866118e9565b8315610d2b576000878152600d60205260409020805460ff19168515151790555b8215610d51576000878152600d60205260409020805461ff001916610100851515021790555b6001600160a01b03821615610d8f576000878152600d60205260409020805462010000600160b01b031916620100006001600160a01b038516021790555b805115610e145760005b8151811015610e12576001600d60008a81526020019081526020016000206001016000848481518110610dce57610dce612ed2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610e0a81612efe565b915050610d99565b505b50505050505050565b6060610e28826114e2565b60008281526006602052604081208054610e4190612c17565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6d90612c17565b8015610eba5780601f10610e8f57610100808354040283529160200191610eba565b820191906000526020600020905b815481529060010190602001808311610e9d57829003601f168201915b505050505090506000610ed860408051602081019091526000815290565b90508051600003610eea575092915050565b815115610f1c578082604051602001610f04929190612f17565b60405160208183030381529060405292505050919050565b610f2584611ade565b949350505050565b610f36816117fd565b610f525760405162461bcd60e51b81526004016105ba90612c9e565b610f5a610b8f565b6001600160a01b0316336001600160a01b03161480610f925750610f7d8161076c565b6001600160a01b0316336001600160a01b0316145b610fae5760405162461bcd60e51b81526004016105ba90612e62565b60008181526009602052604090819020600301805460ff19166001179055517f0b102582412c868866f81f4a2d5f0632027804dda110c66f39e5a9b83340c95d906107619083815260200190565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600b5460ff161580611054575061103f610b8f565b6001600160a01b0316336001600160a01b0316145b6110705760405162461bcd60e51b81526004016105ba90612cfc565b600061107b600c5490565b905061108b600c80546001019055565b61109589826118cf565b61109f81896118e9565b604080518082018252600681526561637469766560d01b6020808301919091526000848152600990915291909120906110d89082612d8c565b5060008181526009602090815260409091206001810180546001600160a01b0319166001600160a01b038b16179055875161111b92600290920191890190612449565b506000818152600960209081526040808320600301805461ffff19908116909155600d9092528220805490911661ff00198815151617610100871515021762010000600160b01b031916620100006001600160a01b038716021790555b82518110156111f1576001600d600084815260200190815260200160002060010160008584815181106111ad576111ad612ed2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806111e981612efe565b915050611178565b506001600160a01b0389166000908152600a6020908152604080832080546001810182559084529190922001829055517f3a5398bda6f1f57d6c96834fa9bf02b5517bdc847d14312015a917ba421c31c9906112509083908c90612e4b565b60405180910390a1505050505050505050565b61126b611744565b6001600160a01b0381166112d05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ba565b6112d981611835565b50565b6112e5816117fd565b6113015760405162461bcd60e51b81526004016105ba90612c9e565b611309610b8f565b6001600160a01b0316336001600160a01b03161480611341575061132c8161076c565b6001600160a01b0316336001600160a01b0316145b61135d5760405162461bcd60e51b81526004016105ba90612e62565b60008181526009602052604090819020600301805461ff001916610100179055517fc2d830ac158eec7b589dfadf012044c95b8646222991556ab4cd311e38bc77d1906107619083815260200190565b6113b6836117fd565b6113d25760405162461bcd60e51b81526004016105ba90612c9e565b6113da610b8f565b6001600160a01b0316336001600160a01b0316148061141257506113fd8361076c565b6001600160a01b0316336001600160a01b0316145b61142e5760405162461bcd60e51b81526004016105ba90612e62565b60008381526009602052604090206003015460ff16156114605760405162461bcd60e51b81526004016105ba90612ea6565b81511561148157600083815260096020526040902061147f8382612d8c565b505b80511561065b5761065b83826118e9565b60006001600160e01b031982166380ac58cd60e01b14806114c357506001600160e01b03198216635b5e139f60e01b145b8061048757506301ffc9a760e01b6001600160e01b0319831614610487565b6114eb816117fd565b6112d95760405162461bcd60e51b81526004016105ba90612cca565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061153c8261076c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806115818361076c565b9050806001600160a01b0316846001600160a01b031614806115a857506115a88185610ffc565b80610f255750836001600160a01b03166115c18461051f565b6001600160a01b031614949350505050565b826001600160a01b03166115e68261076c565b6001600160a01b03161461160c5760405162461bcd60e51b81526004016105ba90612f46565b6001600160a01b03821661166e5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105ba565b61167b8383836001611b52565b826001600160a01b031661168e8261076c565b6001600160a01b0316146116b45760405162461bcd60e51b81526004016105ba90612f46565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b3361174d610b8f565b6001600160a01b0316146106bc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105ba565b6117ab611887565b6007805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117e63390565b6040516117f391906125b5565b60405180910390a1565b6000806118098361181a565b6001600160a01b0316141592915050565b6000908152600260205260409020546001600160a01b031690565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61188f6106d9565b156106bc5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105ba565b610bb8828260405180602001604052806000815250611ee4565b6118f2826117fd565b6119555760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016105ba565b600082815260066020526040902061196d8282612d8c565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b6119ad611f17565b6007805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336117e6565b816001600160a01b0316836001600160a01b031603611a3e5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016105ba565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611ab68484846115d3565b611ac284848484611f62565b610bee5760405162461bcd60e51b81526004016105ba90612f8b565b6060611ae9826114e2565b6000611b0060408051602081019091526000815290565b90506000815111611b205760405180602001604052806000815250611b4b565b80611b2a84612063565b604051602001611b3b929190612f17565b6040516020818303038152906040525b9392505050565b611b5a611887565b600082815260096020526040902060030154610100900460ff1615611b915760405162461bcd60e51b81526004016105ba90612fdd565b6000828152600d602052604090205460ff1615611d1e576000828152600d6020526040908190205490516313289ea360e31b8152620100009091046001600160a01b031690639944f51890611bea9086906004016125b5565b602060405180830381865afa158015611c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2b9190613006565b8015611cb557506000828152600d602052604090819020549051630add9f7f60e01b8152620100009091046001600160a01b031690630add9f7f90611c749086906004016125b5565b602060405180830381865afa158015611c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb59190613006565b611d1e5760405162461bcd60e51b815260206004820152603460248201527f526563697069656e7420686173206e6f7420706173736564204b5943206f72206044820152736973206e6f742053616e6374696f6e735361666560601b60648201526084016105ba565b6000828152600d6020526040902054610100900460ff1615611db9576000828152600d602090815260408083206001600160a01b038716845260010190915290205460ff16611db95760405162461bcd60e51b815260206004820152602160248201527f526563697069656e74206973206e6f7420696e207468652077686974656c69736044820152601d60fa1b60648201526084016105ba565b6001600160a01b03841615611e9d576001600160a01b0384166000908152600a60205260408120815b8154811015611e285784828281548110611dfe57611dfe612ed2565b906000526020600020015403611e1657809250611e28565b80611e2081612efe565b915050611de2565b5080548190611e3990600190613023565b81548110611e4957611e49612ed2565b9060005260206000200154818381548110611e6657611e66612ed2565b906000526020600020018190555080805480611e8457611e84613036565b6001900381819060005260206000200160009055905550505b6001600160a01b03831615611ed8576001600160a01b0383166000908152600a60209081526040822080546001810182559083529120018290555b610bee848484846120f5565b611eee8383612258565b611efb6000848484611f62565b61065b5760405162461bcd60e51b81526004016105ba90612f8b565b611f1f6106d9565b6106bc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105ba565b60006001600160a01b0384163b1561205857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611fa690339089908890889060040161304c565b6020604051808303816000875af1925050508015611fe1575060408051601f3d908101601f19168201909252611fde91810190613089565b60015b61203e573d80801561200f576040519150601f19603f3d011682016040523d82523d6000602084013e612014565b606091505b5080516000036120365760405162461bcd60e51b81526004016105ba90612f8b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610f25565b506001949350505050565b6060600061207083612373565b60010190506000816001600160401b0381111561208f5761208f61269c565b6040519080825280601f01601f1916602001820160405280156120b9576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846120c357509392505050565b6120fd611887565b600082815260096020526040902060030154610100900460ff16156121345760405162461bcd60e51b81526004016105ba90612fdd565b6001600160a01b03841615612218576001600160a01b0384166000908152600a60205260408120815b81548110156121a3578482828154811061217957612179612ed2565b906000526020600020015403612191578092506121a3565b8061219b81612efe565b91505061215d565b50805481906121b490600190613023565b815481106121c4576121c4612ed2565b90600052602060002001548183815481106121e1576121e1612ed2565b9060005260206000200181905550808054806121ff576121ff613036565b6001900381819060005260206000200160009055905550505b6001600160a01b03831615612253576001600160a01b0383166000908152600a60209081526040822080546001810182559083529120018290555b610bee565b6001600160a01b0382166122ae5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105ba565b6122b7816117fd565b156122d45760405162461bcd60e51b81526004016105ba906130a6565b6122e2600083836001611b52565b6122eb816117fd565b156123085760405162461bcd60e51b81526004016105ba906130a6565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106123b25772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b83106123dc576904ee2d6d415b85acef8160201b830492506020015b662386f26fc1000083106123fa57662386f26fc10000830492506010015b6305f5e1008310612412576305f5e100830492506008015b612710831061242657612710830492506004015b60648310612438576064830492506002015b600a83106104875760010192915050565b82805482825590600052602060002090810192821561248f579160200282015b8281111561248f578251829061247f9082612d8c565b5091602001919060010190612469565b5061249b92915061249f565b5090565b8082111561249b5760006124b382826124bc565b5060010161249f565b5080546124c890612c17565b6000825580601f106124d8575050565b601f0160209004906000526020600020908101906112d991905b8082111561249b57600081556001016124f2565b6001600160e01b0319811681146112d957600080fd5b60006020828403121561252e57600080fd5b8135611b4b81612506565b60005b8381101561255457818101518382015260200161253c565b50506000910152565b60008151808452612575816020860160208601612539565b601f01601f19169290920160200192915050565b602081526000611b4b602083018461255d565b6000602082840312156125ae57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b80356001600160a01b03811681146125e057600080fd5b919050565b600080604083850312156125f857600080fd5b612601836125c9565b946020939093013593505050565b60008060006060848603121561262457600080fd5b61262d846125c9565b925061263b602085016125c9565b9150604084013590509250925092565b80151581146112d957600080fd5b80356125e08161264b565b60006020828403121561267657600080fd5b8135611b4b8161264b565b60006020828403121561269357600080fd5b611b4b826125c9565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156126da576126da61269c565b604052919050565b60006001600160401b038311156126fb576126fb61269c565b61270e601f8401601f19166020016126b2565b905082815283838301111561272257600080fd5b828260208301376000602084830101529392505050565b600082601f83011261274a57600080fd5b611b4b838335602085016126e2565b60006001600160401b038211156127725761277261269c565b5060051b60200190565b600082601f83011261278d57600080fd5b813560206127a261279d83612759565b6126b2565b82815260059290921b840181019181810190868411156127c157600080fd5b8286015b848110156128005780356001600160401b038111156127e45760008081fd5b6127f28986838b0101612739565b8452509183019183016127c5565b509695505050505050565b6000806000806080858703121561282157600080fd5b61282a856125c9565b935060208501356001600160401b038082111561284657600080fd5b61285288838901612739565b9450612860604088016125c9565b9350606087013591508082111561287657600080fd5b506128838782880161277c565b91505092959194509250565b6080815260006128a2608083018761255d565b6001600160a01b039590951660208301525091151560408301521515606090910152919050565b600080604083850312156128dc57600080fd5b6128e5836125c9565b915060208301356128f58161264b565b809150509250929050565b6000806000806080858703121561291657600080fd5b61291f856125c9565b935061292d602086016125c9565b92506040850135915060608501356001600160401b0381111561294f57600080fd5b8501601f8101871361296057600080fd5b612883878235602084016126e2565b600082601f83011261298057600080fd5b8135602061299061279d83612759565b82815260059290921b840181019181810190868411156129af57600080fd5b8286015b84811015612800576129c4816125c9565b83529183019183016129b3565b600080600080600080600060e0888a0312156129ec57600080fd5b8735965060208801356001600160401b0380821115612a0a57600080fd5b612a168b838c01612739565b975060408a0135915080821115612a2c57600080fd5b612a388b838c01612739565b965060608a01359150612a4a8261264b565b909450608089013590612a5c8261264b565b819450612a6b60a08b016125c9565b935060c08a0135915080821115612a8157600080fd5b50612a8e8a828b0161296f565b91505092959891949750929550565b60008060408385031215612ab057600080fd5b612ab9836125c9565b9150612ac7602084016125c9565b90509250929050565b600080600080600080600080610100898b031215612aed57600080fd5b612af6896125c9565b975060208901356001600160401b0380821115612b1257600080fd5b612b1e8c838d01612739565b9850612b2c60408c016125c9565b975060608b0135915080821115612b4257600080fd5b612b4e8c838d0161277c565b9650612b5c60808c01612659565b9550612b6a60a08c01612659565b9450612b7860c08c016125c9565b935060e08b0135915080821115612b8e57600080fd5b50612b9b8b828c0161296f565b9150509295985092959890939650565b600080600060608486031215612bc057600080fd5b8335925060208401356001600160401b0380821115612bde57600080fd5b612bea87838801612739565b93506040860135915080821115612c0057600080fd5b50612c0d86828701612739565b9150509250925092565b600181811c90821680612c2b57607f821691505b602082108103612c4b57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526012908201527113919508191bd95cc81b9bdd08195e1a5cdd60721b604082015260600190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b60208082526022908201527f4d696e74696e67206973207265737472696374656420746f20746865206f776e60408201526132b960f11b606082015260800190565b601f82111561065b57600081815260208120601f850160051c81016020861015612d655750805b601f850160051c820191505b81811015612d8457828155600101612d71565b505050505050565b81516001600160401b03811115612da557612da561269c565b612db981612db38454612c17565b84612d3e565b602080601f831160018114612dee5760008415612dd65750858301515b600019600386901b1c1916600185901b178555612d84565b600085815260208120601f198616915b82811015612e1d57888601518255948401946001909101908401612dfe565b5085821015612e3b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b9182526001600160a01b0316602082015260400190565b60208082526024908201527f43616c6c6572206973206e6f7420746865206f776e6572206f72204e4654206f6040820152633bb732b960e11b606082015260800190565b60208082526012908201527113595d1859185d18481a5cc81b1bd8dad95960721b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612f1057612f10612ee8565b5060010190565b60008351612f29818460208801612539565b835190830190612f3d818360208801612539565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252600f908201526e151bdad95b881a5cc81c185d5cd959608a1b604082015260600190565b60006020828403121561301857600080fd5b8151611b4b8161264b565b8181038181111561048757610487612ee8565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061307f9083018461255d565b9695505050505050565b60006020828403121561309b57600080fd5b8151611b4b81612506565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060408201526060019056fea26469706673582212202eef960c8c50c772c4994eccecbfd3bf57d2ebc4366b0f8b630713e6ee1ca09864736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b05760003560e01c80638a2ddd03116100ef578063bafd02fb11610092578063bafd02fb146103ca578063c87b56dd146103dd578063dd467064146103f0578063e985e9c514610403578063ef96652314610416578063f2fde38b14610429578063fbd395f81461043c578063fda361641461044f57600080fd5b80638a2ddd03146102f25780638c210975146102fa5780638da5cb5b1461031d57806395d89b41146103255780639802f6e91461032d578063a22cb46514610391578063b88d4fde146103a4578063ba27d56f146103b757600080fd5b80635c975abb116101575780635c975abb146102685780636198e339146102705780636352211e1461028357806370a0823114610296578063715018a6146102b757806374546e25146102bf578063776ab634146102d257806385d098dc146102e557600080fd5b806301ffc9a7146101b557806306fdde03146101dd578063081812fc146101f2578063095ea7b31461021257806323b872dd1461022757806342842e0e1461023a578063595c6a671461024d5780635bb9458914610255575b600080fd5b6101c86101c336600461251c565b610462565b60405190151581526020015b60405180910390f35b6101e561048d565b6040516101d49190612589565b61020561020036600461259c565b61051f565b6040516101d491906125b5565b6102256102203660046125e5565b610546565b005b61022561023536600461260f565b610660565b61022561024836600461260f565b610691565b6102256106ac565b610225610263366004612664565b6106be565b6101c86106d9565b61022561027e36600461259c565b6106e9565b61020561029136600461259c565b61076c565b6102a96102a4366004612681565b6107a0565b6040519081526020016101d4565b610225610826565b6102256102cd36600461280b565b610838565b6102256102e036600461259c565b6109ea565b600b546101c89060ff1681565b610225610abf565b61030d61030836600461259c565b610acf565b6040516101d4949392919061288f565b610205610b8f565b6101e5610b9e565b61036b61033b36600461259c565b600d6020526000908152604090205460ff808216916101008104909116906201000090046001600160a01b031683565b60408051931515845291151560208401526001600160a01b0316908201526060016101d4565b61022561039f3660046128c9565b610bad565b6102256103b2366004612900565b610bbc565b6102a96103c53660046125e5565b610bf4565b6102256103d83660046129d1565b610c25565b6101e56103eb36600461259c565b610e1d565b6102256103fe36600461259c565b610f2d565b6101c8610411366004612a9d565b610ffc565b610225610424366004612ad0565b61102a565b610225610437366004612681565b611263565b61022561044a36600461259c565b6112dc565b61022561045d366004612bab565b6113ad565b60006001600160e01b03198216632483248360e11b1480610487575061048782611492565b92915050565b60606000805461049c90612c17565b80601f01602080910402602001604051908101604052809291908181526020018280546104c890612c17565b80156105155780601f106104ea57610100808354040283529160200191610515565b820191906000526020600020905b8154815290600101906020018083116104f857829003601f168201915b5050505050905090565b600061052a826114e2565b506000908152600460205260409020546001600160a01b031690565b60006105518261076c565b9050806001600160a01b0316836001600160a01b0316036105c35760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105df57506105df8133610ffc565b6106515760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016105ba565b61065b8383611507565b505050565b61066a3382611575565b6106865760405162461bcd60e51b81526004016105ba90612c51565b61065b8383836115d3565b61065b83838360405180602001604052806000815250610bbc565b6106b4611744565b6106bc6117a3565b565b6106c6611744565b600b805460ff1916911515919091179055565b600754600160a01b900460ff1690565b6106f1611744565b6106fa816117fd565b6107165760405162461bcd60e51b81526004016105ba90612c9e565b60008181526009602052604090819020600301805460ff19169055517f15231ceabda9f4f9436b8f17a28b36c21c8e434c821082aa1cfb3fcc994fe6c0906107619083815260200190565b60405180910390a150565b6000806107788361181a565b90506001600160a01b0381166104875760405162461bcd60e51b81526004016105ba90612cca565b60006001600160a01b03821661080a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105ba565b506001600160a01b031660009081526003602052604090205490565b61082e611744565b6106bc6000611835565b610840611887565b600b5460ff16158061086a5750610855610b8f565b6001600160a01b0316336001600160a01b0316145b6108865760405162461bcd60e51b81526004016105ba90612cfc565b600061089160085490565b90506108a1600880546001019055565b6108ab85826118cf565b6108b581856118e9565b6001600160a01b038086166000908152600a60209081526040808320805460018101825590845282842001859055805160e081018252600660a082019081526561637469766560d01b60c0830152815293871684830152838101869052606084018390526080840183905284835260099091529020815181906109389082612d8c565b506020828101516001830180546001600160a01b0319166001600160a01b03909216919091179055604083015180516109779260028501920190612449565b5060608201516003909101805460809093015115156101000261ff00199215159290921661ffff19909316929092171790556040517f3a5398bda6f1f57d6c96834fa9bf02b5517bdc847d14312015a917ba421c31c9906109db9083908890612e4b565b60405180910390a15050505050565b6109f2611744565b6109fb816117fd565b610a175760405162461bcd60e51b81526004016105ba90612c9e565b610a1f610b8f565b6001600160a01b0316336001600160a01b03161480610a575750610a428161076c565b6001600160a01b0316336001600160a01b0316145b610a735760405162461bcd60e51b81526004016105ba90612e62565b60008181526009602052604090819020600301805461ff0019169055517f0cfa9cc56bacd896c88effb6a4051b954fcaaf2de7ae98882e39f294ea651843906107619083815260200190565b610ac7611744565b6106bc6119a5565b600960205260009081526040902080548190610aea90612c17565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1690612c17565b8015610b635780601f10610b3857610100808354040283529160200191610b63565b820191906000526020600020905b815481529060010190602001808311610b4657829003601f168201915b50505050600183015460039093015491926001600160a01b03169160ff80821692506101009091041684565b6007546001600160a01b031690565b60606001805461049c90612c17565b610bb83383836119e1565b5050565b610bc63383611575565b610be25760405162461bcd60e51b81526004016105ba90612c51565b610bee84848484611aab565b50505050565b600a6020528160005260406000208181548110610c1057600080fd5b90600052602060002001600091509150505481565b610c2e876117fd565b610c4a5760405162461bcd60e51b81526004016105ba90612c9e565b610c52610b8f565b6001600160a01b0316336001600160a01b03161480610c8a5750610c758761076c565b6001600160a01b0316336001600160a01b0316145b610ca65760405162461bcd60e51b81526004016105ba90612e62565b60008781526009602052604090206003015460ff1615610cd85760405162461bcd60e51b81526004016105ba90612ea6565b855115610cf9576000878152600960205260409020610cf78782612d8c565b505b845115610d0a57610d0a87866118e9565b8315610d2b576000878152600d60205260409020805460ff19168515151790555b8215610d51576000878152600d60205260409020805461ff001916610100851515021790555b6001600160a01b03821615610d8f576000878152600d60205260409020805462010000600160b01b031916620100006001600160a01b038516021790555b805115610e145760005b8151811015610e12576001600d60008a81526020019081526020016000206001016000848481518110610dce57610dce612ed2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610e0a81612efe565b915050610d99565b505b50505050505050565b6060610e28826114e2565b60008281526006602052604081208054610e4190612c17565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6d90612c17565b8015610eba5780601f10610e8f57610100808354040283529160200191610eba565b820191906000526020600020905b815481529060010190602001808311610e9d57829003601f168201915b505050505090506000610ed860408051602081019091526000815290565b90508051600003610eea575092915050565b815115610f1c578082604051602001610f04929190612f17565b60405160208183030381529060405292505050919050565b610f2584611ade565b949350505050565b610f36816117fd565b610f525760405162461bcd60e51b81526004016105ba90612c9e565b610f5a610b8f565b6001600160a01b0316336001600160a01b03161480610f925750610f7d8161076c565b6001600160a01b0316336001600160a01b0316145b610fae5760405162461bcd60e51b81526004016105ba90612e62565b60008181526009602052604090819020600301805460ff19166001179055517f0b102582412c868866f81f4a2d5f0632027804dda110c66f39e5a9b83340c95d906107619083815260200190565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600b5460ff161580611054575061103f610b8f565b6001600160a01b0316336001600160a01b0316145b6110705760405162461bcd60e51b81526004016105ba90612cfc565b600061107b600c5490565b905061108b600c80546001019055565b61109589826118cf565b61109f81896118e9565b604080518082018252600681526561637469766560d01b6020808301919091526000848152600990915291909120906110d89082612d8c565b5060008181526009602090815260409091206001810180546001600160a01b0319166001600160a01b038b16179055875161111b92600290920191890190612449565b506000818152600960209081526040808320600301805461ffff19908116909155600d9092528220805490911661ff00198815151617610100871515021762010000600160b01b031916620100006001600160a01b038716021790555b82518110156111f1576001600d600084815260200190815260200160002060010160008584815181106111ad576111ad612ed2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806111e981612efe565b915050611178565b506001600160a01b0389166000908152600a6020908152604080832080546001810182559084529190922001829055517f3a5398bda6f1f57d6c96834fa9bf02b5517bdc847d14312015a917ba421c31c9906112509083908c90612e4b565b60405180910390a1505050505050505050565b61126b611744565b6001600160a01b0381166112d05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ba565b6112d981611835565b50565b6112e5816117fd565b6113015760405162461bcd60e51b81526004016105ba90612c9e565b611309610b8f565b6001600160a01b0316336001600160a01b03161480611341575061132c8161076c565b6001600160a01b0316336001600160a01b0316145b61135d5760405162461bcd60e51b81526004016105ba90612e62565b60008181526009602052604090819020600301805461ff001916610100179055517fc2d830ac158eec7b589dfadf012044c95b8646222991556ab4cd311e38bc77d1906107619083815260200190565b6113b6836117fd565b6113d25760405162461bcd60e51b81526004016105ba90612c9e565b6113da610b8f565b6001600160a01b0316336001600160a01b0316148061141257506113fd8361076c565b6001600160a01b0316336001600160a01b0316145b61142e5760405162461bcd60e51b81526004016105ba90612e62565b60008381526009602052604090206003015460ff16156114605760405162461bcd60e51b81526004016105ba90612ea6565b81511561148157600083815260096020526040902061147f8382612d8c565b505b80511561065b5761065b83826118e9565b60006001600160e01b031982166380ac58cd60e01b14806114c357506001600160e01b03198216635b5e139f60e01b145b8061048757506301ffc9a760e01b6001600160e01b0319831614610487565b6114eb816117fd565b6112d95760405162461bcd60e51b81526004016105ba90612cca565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061153c8261076c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806115818361076c565b9050806001600160a01b0316846001600160a01b031614806115a857506115a88185610ffc565b80610f255750836001600160a01b03166115c18461051f565b6001600160a01b031614949350505050565b826001600160a01b03166115e68261076c565b6001600160a01b03161461160c5760405162461bcd60e51b81526004016105ba90612f46565b6001600160a01b03821661166e5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105ba565b61167b8383836001611b52565b826001600160a01b031661168e8261076c565b6001600160a01b0316146116b45760405162461bcd60e51b81526004016105ba90612f46565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b3361174d610b8f565b6001600160a01b0316146106bc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105ba565b6117ab611887565b6007805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117e63390565b6040516117f391906125b5565b60405180910390a1565b6000806118098361181a565b6001600160a01b0316141592915050565b6000908152600260205260409020546001600160a01b031690565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61188f6106d9565b156106bc5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105ba565b610bb8828260405180602001604052806000815250611ee4565b6118f2826117fd565b6119555760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016105ba565b600082815260066020526040902061196d8282612d8c565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b6119ad611f17565b6007805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336117e6565b816001600160a01b0316836001600160a01b031603611a3e5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016105ba565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611ab68484846115d3565b611ac284848484611f62565b610bee5760405162461bcd60e51b81526004016105ba90612f8b565b6060611ae9826114e2565b6000611b0060408051602081019091526000815290565b90506000815111611b205760405180602001604052806000815250611b4b565b80611b2a84612063565b604051602001611b3b929190612f17565b6040516020818303038152906040525b9392505050565b611b5a611887565b600082815260096020526040902060030154610100900460ff1615611b915760405162461bcd60e51b81526004016105ba90612fdd565b6000828152600d602052604090205460ff1615611d1e576000828152600d6020526040908190205490516313289ea360e31b8152620100009091046001600160a01b031690639944f51890611bea9086906004016125b5565b602060405180830381865afa158015611c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2b9190613006565b8015611cb557506000828152600d602052604090819020549051630add9f7f60e01b8152620100009091046001600160a01b031690630add9f7f90611c749086906004016125b5565b602060405180830381865afa158015611c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb59190613006565b611d1e5760405162461bcd60e51b815260206004820152603460248201527f526563697069656e7420686173206e6f7420706173736564204b5943206f72206044820152736973206e6f742053616e6374696f6e735361666560601b60648201526084016105ba565b6000828152600d6020526040902054610100900460ff1615611db9576000828152600d602090815260408083206001600160a01b038716845260010190915290205460ff16611db95760405162461bcd60e51b815260206004820152602160248201527f526563697069656e74206973206e6f7420696e207468652077686974656c69736044820152601d60fa1b60648201526084016105ba565b6001600160a01b03841615611e9d576001600160a01b0384166000908152600a60205260408120815b8154811015611e285784828281548110611dfe57611dfe612ed2565b906000526020600020015403611e1657809250611e28565b80611e2081612efe565b915050611de2565b5080548190611e3990600190613023565b81548110611e4957611e49612ed2565b9060005260206000200154818381548110611e6657611e66612ed2565b906000526020600020018190555080805480611e8457611e84613036565b6001900381819060005260206000200160009055905550505b6001600160a01b03831615611ed8576001600160a01b0383166000908152600a60209081526040822080546001810182559083529120018290555b610bee848484846120f5565b611eee8383612258565b611efb6000848484611f62565b61065b5760405162461bcd60e51b81526004016105ba90612f8b565b611f1f6106d9565b6106bc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105ba565b60006001600160a01b0384163b1561205857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611fa690339089908890889060040161304c565b6020604051808303816000875af1925050508015611fe1575060408051601f3d908101601f19168201909252611fde91810190613089565b60015b61203e573d80801561200f576040519150601f19603f3d011682016040523d82523d6000602084013e612014565b606091505b5080516000036120365760405162461bcd60e51b81526004016105ba90612f8b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610f25565b506001949350505050565b6060600061207083612373565b60010190506000816001600160401b0381111561208f5761208f61269c565b6040519080825280601f01601f1916602001820160405280156120b9576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846120c357509392505050565b6120fd611887565b600082815260096020526040902060030154610100900460ff16156121345760405162461bcd60e51b81526004016105ba90612fdd565b6001600160a01b03841615612218576001600160a01b0384166000908152600a60205260408120815b81548110156121a3578482828154811061217957612179612ed2565b906000526020600020015403612191578092506121a3565b8061219b81612efe565b91505061215d565b50805481906121b490600190613023565b815481106121c4576121c4612ed2565b90600052602060002001548183815481106121e1576121e1612ed2565b9060005260206000200181905550808054806121ff576121ff613036565b6001900381819060005260206000200160009055905550505b6001600160a01b03831615612253576001600160a01b0383166000908152600a60209081526040822080546001810182559083529120018290555b610bee565b6001600160a01b0382166122ae5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105ba565b6122b7816117fd565b156122d45760405162461bcd60e51b81526004016105ba906130a6565b6122e2600083836001611b52565b6122eb816117fd565b156123085760405162461bcd60e51b81526004016105ba906130a6565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106123b25772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b83106123dc576904ee2d6d415b85acef8160201b830492506020015b662386f26fc1000083106123fa57662386f26fc10000830492506010015b6305f5e1008310612412576305f5e100830492506008015b612710831061242657612710830492506004015b60648310612438576064830492506002015b600a83106104875760010192915050565b82805482825590600052602060002090810192821561248f579160200282015b8281111561248f578251829061247f9082612d8c565b5091602001919060010190612469565b5061249b92915061249f565b5090565b8082111561249b5760006124b382826124bc565b5060010161249f565b5080546124c890612c17565b6000825580601f106124d8575050565b601f0160209004906000526020600020908101906112d991905b8082111561249b57600081556001016124f2565b6001600160e01b0319811681146112d957600080fd5b60006020828403121561252e57600080fd5b8135611b4b81612506565b60005b8381101561255457818101518382015260200161253c565b50506000910152565b60008151808452612575816020860160208601612539565b601f01601f19169290920160200192915050565b602081526000611b4b602083018461255d565b6000602082840312156125ae57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b80356001600160a01b03811681146125e057600080fd5b919050565b600080604083850312156125f857600080fd5b612601836125c9565b946020939093013593505050565b60008060006060848603121561262457600080fd5b61262d846125c9565b925061263b602085016125c9565b9150604084013590509250925092565b80151581146112d957600080fd5b80356125e08161264b565b60006020828403121561267657600080fd5b8135611b4b8161264b565b60006020828403121561269357600080fd5b611b4b826125c9565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156126da576126da61269c565b604052919050565b60006001600160401b038311156126fb576126fb61269c565b61270e601f8401601f19166020016126b2565b905082815283838301111561272257600080fd5b828260208301376000602084830101529392505050565b600082601f83011261274a57600080fd5b611b4b838335602085016126e2565b60006001600160401b038211156127725761277261269c565b5060051b60200190565b600082601f83011261278d57600080fd5b813560206127a261279d83612759565b6126b2565b82815260059290921b840181019181810190868411156127c157600080fd5b8286015b848110156128005780356001600160401b038111156127e45760008081fd5b6127f28986838b0101612739565b8452509183019183016127c5565b509695505050505050565b6000806000806080858703121561282157600080fd5b61282a856125c9565b935060208501356001600160401b038082111561284657600080fd5b61285288838901612739565b9450612860604088016125c9565b9350606087013591508082111561287657600080fd5b506128838782880161277c565b91505092959194509250565b6080815260006128a2608083018761255d565b6001600160a01b039590951660208301525091151560408301521515606090910152919050565b600080604083850312156128dc57600080fd5b6128e5836125c9565b915060208301356128f58161264b565b809150509250929050565b6000806000806080858703121561291657600080fd5b61291f856125c9565b935061292d602086016125c9565b92506040850135915060608501356001600160401b0381111561294f57600080fd5b8501601f8101871361296057600080fd5b612883878235602084016126e2565b600082601f83011261298057600080fd5b8135602061299061279d83612759565b82815260059290921b840181019181810190868411156129af57600080fd5b8286015b84811015612800576129c4816125c9565b83529183019183016129b3565b600080600080600080600060e0888a0312156129ec57600080fd5b8735965060208801356001600160401b0380821115612a0a57600080fd5b612a168b838c01612739565b975060408a0135915080821115612a2c57600080fd5b612a388b838c01612739565b965060608a01359150612a4a8261264b565b909450608089013590612a5c8261264b565b819450612a6b60a08b016125c9565b935060c08a0135915080821115612a8157600080fd5b50612a8e8a828b0161296f565b91505092959891949750929550565b60008060408385031215612ab057600080fd5b612ab9836125c9565b9150612ac7602084016125c9565b90509250929050565b600080600080600080600080610100898b031215612aed57600080fd5b612af6896125c9565b975060208901356001600160401b0380821115612b1257600080fd5b612b1e8c838d01612739565b9850612b2c60408c016125c9565b975060608b0135915080821115612b4257600080fd5b612b4e8c838d0161277c565b9650612b5c60808c01612659565b9550612b6a60a08c01612659565b9450612b7860c08c016125c9565b935060e08b0135915080821115612b8e57600080fd5b50612b9b8b828c0161296f565b9150509295985092959890939650565b600080600060608486031215612bc057600080fd5b8335925060208401356001600160401b0380821115612bde57600080fd5b612bea87838801612739565b93506040860135915080821115612c0057600080fd5b50612c0d86828701612739565b9150509250925092565b600181811c90821680612c2b57607f821691505b602082108103612c4b57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526012908201527113919508191bd95cc81b9bdd08195e1a5cdd60721b604082015260600190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b60208082526022908201527f4d696e74696e67206973207265737472696374656420746f20746865206f776e60408201526132b960f11b606082015260800190565b601f82111561065b57600081815260208120601f850160051c81016020861015612d655750805b601f850160051c820191505b81811015612d8457828155600101612d71565b505050505050565b81516001600160401b03811115612da557612da561269c565b612db981612db38454612c17565b84612d3e565b602080601f831160018114612dee5760008415612dd65750858301515b600019600386901b1c1916600185901b178555612d84565b600085815260208120601f198616915b82811015612e1d57888601518255948401946001909101908401612dfe565b5085821015612e3b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b9182526001600160a01b0316602082015260400190565b60208082526024908201527f43616c6c6572206973206e6f7420746865206f776e6572206f72204e4654206f6040820152633bb732b960e11b606082015260800190565b60208082526012908201527113595d1859185d18481a5cc81b1bd8dad95960721b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612f1057612f10612ee8565b5060010190565b60008351612f29818460208801612539565b835190830190612f3d818360208801612539565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252600f908201526e151bdad95b881a5cc81c185d5cd959608a1b604082015260600190565b60006020828403121561301857600080fd5b8151611b4b8161264b565b8181038181111561048757610487612ee8565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061307f9083018461255d565b9695505050505050565b60006020828403121561309b57600080fd5b8151611b4b81612506565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060408201526060019056fea26469706673582212202eef960c8c50c772c4994eccecbfd3bf57d2ebc4366b0f8b630713e6ee1ca09864736f6c63430008130033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 274,
        "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 276,
        "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 280,
        "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 284,
        "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 288,
        "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 294,
        "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1325,
        "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 158,
        "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
        "label": "_paused",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 3173,
        "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)1850_storage"
      },
      {
        "astId": 3190,
        "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
        "label": "nftData",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(NFTData)3185_storage)"
      },
      {
        "astId": 3195,
        "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
        "label": "tokensByAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3198,
        "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
        "label": "onlyOwnerCanMint",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 3690,
        "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)1850_storage"
      },
      {
        "astId": 3706,
        "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
        "label": "nftKycData",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(NFTKYCData)3701_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(NFTData)3185_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTFactory.NFTData)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTData)3185_storage"
      },
      "t_mapping(t_uint256,t_struct(NFTKYCData)3701_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTFactoryKyc.NFTKYCData)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTKYCData)3701_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1850_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1849,
            "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(NFTData)3185_storage": {
        "encoding": "inplace",
        "label": "struct NFTFactory.NFTData",
        "members": [
          {
            "astId": 3175,
            "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3177,
            "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
            "label": "linkedToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3180,
            "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
            "label": "linkedTokenInterfaces",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 3182,
            "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
            "label": "locked",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 3184,
            "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
            "label": "paused",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(NFTKYCData)3701_storage": {
        "encoding": "inplace",
        "label": "struct NFTFactoryKyc.NFTKYCData",
        "members": [
          {
            "astId": 3692,
            "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
            "label": "kycCheckEnabled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3694,
            "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
            "label": "whitelistEnabled",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3696,
            "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
            "label": "kycContract",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3700,
            "contract": "contracts/NFTFactoryKyc.sol:NFTFactoryKyc",
            "label": "whitelist",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}